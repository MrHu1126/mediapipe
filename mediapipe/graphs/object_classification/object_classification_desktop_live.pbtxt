# MediaPipe graph that performs object classification with PyTorch on CPU.
# Used in the examples in
# mediapipe/examples/desktop/object_classification:object_classification_pytorch_cpu.

# Images on CPU coming into and out of the graph.
input_stream: "input_video"
output_stream: "output_video"

# Throttles the images flowing downstream for flow control. It passes through
# the very first incoming image unaltered, and waits for
# PyTorchTensorsToClassificationCalculator downstream in the graph to finish
# generating the corresponding classifications before it passes through another
# image. All images that come in while waiting are dropped, limiting the number
# of in-flight images between this calculator and
# PyTorchTensorsToClassificationCalculator to 1. This prevents the nodes in between
# from queuing up incoming images and data excessively, which leads to increased
# latency and memory usage, unwanted in real-time mobile applications. It also
# eliminates unnecessarily computation, e.g., a transformed image produced by
# ImageTransformationCalculator may get dropped downstream if the subsequent
# PyTorchConverterCalculator or PyTorchInferenceCalculator is still busy
# processing previous inputs.
node {
  calculator: "FlowLimiterCalculator"
  input_stream: "input_video"
  input_stream: "FINISHED:output_classifications"
  input_stream_info: {
    tag_index: "FINISHED"
    back_edge: true
  }
  output_stream: "throttled_input_video"
}

# Transforms the input image on CPU to a 224x224 image. To scale the input
# image, the scale_mode option is set to FIT to preserve the aspect ratio,
# resulting in potential letterboxing in the transformed image.
node: {
  calculator: "ImageTransformationCalculator"
  input_stream: "IMAGE:throttled_input_video"
  output_stream: "IMAGE:transformed_input_video"
  output_stream: "LETTERBOX_PADDING:letterbox_padding"
  node_options: {
    [type.googleapis.com/mediapipe.ImageTransformationCalculatorOptions] {
      output_width: 224
      output_height: 224
      scale_mode: FIT
    }
  }
}

# Converts the transformed input image on CPU into an image tensor stored as a
# PyTorch tensor. Pixel values are normalized using mean = [0.485, 0.456, 0.406]
# and std = [0.229, 0.224, 0.225].
node {
  calculator: "PyTorchConverterCalculator"
  input_stream: "IMAGE:transformed_input_video"
  output_stream: "TENSORS:image_tensor"
  node_options: {
    [type.googleapis.com/mediapipe.PyTorchConverterCalculatorOptions] {
      per_channel_normalizations: {sub:0.485 div:0.229}
      per_channel_normalizations: {sub:0.456 div:0.224}
      per_channel_normalizations: {sub:0.406 div:0.225}
    }
  }
}

# Runs a PyTorch model on CPU that takes an image tensor and outputs a
# vector of tensors representing, for instance, classification scores.
node {
  calculator: "PyTorchInferenceCalculator"
  input_stream: "TENSORS:image_tensor"
  output_stream: "TENSORS:classification_tensors"
  node_options: {
    [type.googleapis.com/mediapipe.PyTorchInferenceCalculatorOptions] {
      model_path: "mediapipe/models/mobilenetv2.pt"
    }
  }
}

# Decodes the classifications tensors generated by the PyTorch model, based on
# the specification in the options, into a vector of classifications.
# Maps classification label IDs to the corresponding label text. The label map is
# provided in the label_map_path option.
node {
  calculator: "PyTorchTensorsToClassificationCalculator"
  input_stream: "TENSORS:classification_tensors"
  output_stream: "CLASSIFICATION_LIST:output_classifications"
  node_options: {
    [type.googleapis.com/mediapipe.PyTorchTensorsToClassificationCalculatorOptions] {
      top_k: 3
      min_score_threshold: 0.1
      label_map_path: "mediapipe/models/mobilenetv2.labelmap"
    }
  }
}

# Converts the classifications label to drawing primitives for annotation overlay.
node {
  calculator: "LabelsToRenderDataCalculator"
  input_stream: "CLASSIFICATIONS:output_classifications"
  output_stream: "RENDER_DATA:render_data"
  node_options: {
    [type.googleapis.com/mediapipe.LabelsToRenderDataCalculatorOptions] {
      color { r: 255 g: 0 b: 0 }
      color { r: 0 g: 255 b: 0 }
      color { r: 0 g: 0 b: 255 }
      thickness: 2.0
      font_height_px: 20
      font_face: 1
      location: TOP_LEFT
    }
  }
}

# Draws annotations and overlays them on top of the input images.
node {
  calculator: "AnnotationOverlayCalculator"
  input_stream: "IMAGE:throttled_input_video"
  input_stream: "render_data"
  output_stream: "IMAGE:output_video"
}
