# MediaPipe graph that performs face mesh with TensorFlow Lite on CPU.

# Input image. (ImageFrame)
input_stream: "input_video"

# Output image with rendered results. (ImageFrame)
output_stream: "output_video"

node {
  calculator: "FlowLimiterCalculator"
  input_stream: "input_video"
  input_stream: "FINISHED:output_video"
  input_stream_info: {
    tag_index: "FINISHED"
    back_edge: true
  }
  output_stream: "throttled_input_video"
}


# Defines side packets for further use in the graph.
node {
  calculator: "ConstantSidePacketCalculator"
  output_side_packet: "PACKET:0:num_faces"
  output_side_packet: "PACKET:1:with_attention"
  node_options: {
    [type.googleapis.com/mediapipe.ConstantSidePacketCalculatorOptions]: {
      packet { int_value: 1 }
      packet { bool_value: true }
    }
  }
}

# Subgraph that detects faces and corresponding landmarks.
node {
  calculator: "FaceLandmarkFrontCpu"
  input_stream: "IMAGE:throttled_input_video"
  input_side_packet: "NUM_FACES:num_faces"
  input_side_packet: "WITH_ATTENTION:with_attention"
  output_stream: "LANDMARKS:multi_face_landmarks"
}

node {
  calculator: "FastUtilsCalculator"
  input_stream: "NORM_LANDMARKS:multi_face_landmarks"
  input_stream: "IMAGE:throttled_input_video"
  output_stream: "IMAGE:out_image_frame"
}

node: {
  calculator: "ImageTransformationCalculator"
  input_stream: "IMAGE:out_image_frame"
  output_stream: "IMAGE:transformed_input_video"
  node_options: {
    [type.googleapis.com/mediapipe.ImageTransformationCalculatorOptions] {
      output_width: 256
      output_height: 256
    }
  }
}

node {
   calculator: "TensorConverterCalculator"
   input_stream: "IMAGE:transformed_input_video"
   output_stream: "TENSORS:input_tensor"
   options: {
     [mediapipe.TensorConverterCalculatorOptions.ext] {
       zero_center: true
     }
   }
}

node {
  calculator: "InferenceCalculator"
  input_stream: "TENSORS:input_tensor"
  output_stream: "TENSORS:output_tensor"
  options: {
    [mediapipe.InferenceCalculatorOptions.ext] {
      model_path: "mediapipe/models/model_float32.tflite"
      delegate { xnnpack {} }
    }
  }
}

node {
  calculator: "ImagePropertiesCalculator"
  input_stream: "IMAGE:transformed_input_video"
  output_stream: "SIZE:input_size"
}

node {
  calculator: "TensorsToSegmentationCalculator"
  input_stream: "TENSORS:output_tensor"
  input_stream: "OUTPUT_SIZE:input_size"
  output_stream: "MASK:output"
  options: {
    [mediapipe.TensorsToSegmentationCalculatorOptions.ext] {
      activation: NONE
    }
 }
}

node{
  calculator: "FromImageCalculator"
  input_stream: "IMAGE:output"
  output_stream: "IMAGE_CPU:output_video"
}

