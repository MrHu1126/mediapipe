# MediaPipe graph that performs face mesh with TensorFlow Lite on CPU.

# Input image. (ImageFrame)
input_stream: "input_video"

# Output image with rendered results. (ImageFrame)
output_stream: "output_video"

profiler_config {
  trace_enabled: true
  enable_profiler: true
  trace_log_interval_count: 200
  trace_log_path: "/home/mslight/Work/clone/mediapipe/mediapipe/logs/deformation/"
}

node {
  calculator: "FlowLimiterCalculator"
  input_stream: "input_video"
  input_stream: "FINISHED:output_video"
  input_stream_info: {
    tag_index: "FINISHED"
    back_edge: true
  }
  output_stream: "throttled_input_video"
}


# Defines side packets for further use in the graph.
node {
  calculator: "ConstantSidePacketCalculator"
  output_side_packet: "PACKET:0:num_faces"
  output_side_packet: "PACKET:1:with_attention"
  node_options: {
    [type.googleapis.com/mediapipe.ConstantSidePacketCalculatorOptions]: {
      packet { int_value: 1 }
      packet { bool_value: true }
    }
  }
}

# Subgraph that detects faces and corresponding landmarks.
node {
  calculator: "FaceLandmarkFrontCpu"
  input_stream: "IMAGE:throttled_input_video"
  input_side_packet: "NUM_FACES:num_faces"
  input_side_packet: "WITH_ATTENTION:with_attention"
  output_stream: "LANDMARKS:multi_face_landmarks"
}

node {
  calculator: "ColorConvertCalculator"
  input_stream: "RGBA_IN:throttled_input_video"
  output_stream: "BGR_OUT:throttled_input_video_bgr"
}

node {
  calculator: "ImagePropertiesCalculator"
  input_stream: "IMAGE:throttled_input_video"
  output_stream: "SIZE:size"	
}

node {
  calculator: "FaceProcessorCalculator"
  input_stream: "NORM_LANDMARKS:multi_face_landmarks"
  input_stream: "SIZE:size"
  output_stream: "SRC_TENSOR:src"
  output_stream: "DST_TENSOR:dst"
}

node {
  calculator: "WarpAffineCalculator"
  input_stream: "IMAGE:throttled_input_video_bgr"
  input_stream: "SRC_TENSOR:src"
  input_stream: "DST_TENSOR:dst"
  output_stream: "IMAGE:output_video_bgr"
}

node{
  calculator: "ColorConvertCalculator"
  input_stream: "BGR_IN:output_video_bgr"
  output_stream: "RGBA_OUT:output_video"
}
