# MediaPipe face mesh rendering subgraph.

type: "FaceRendererCpu"

# CPU image. (ImageFrame)
input_stream: "IMAGE:input_image"
# Collection of detected/predicted faces, each represented as a list of
# landmarks. (std::vector<NormalizedLandmarkList>)
input_stream: "LANDMARKS:multi_face_landmarks"

# CPU image with rendered data. (ImageFrame)
output_stream: "IMAGE:output_image"

node {
  calculator: "ImagePropertiesCalculator"
  input_stream: "IMAGE:input_image"
  output_stream: "SIZE:size"
}

# Outputs each element of multi_face_landmarks at a fake timestamp for the rest
# of the graph to process. At the end of the loop, outputs the BATCH_END
# timestamp for downstream calculators to inform them that all elements in the
# vector have been processed.
node {
  calculator: "BeginLoopNormalizedLandmarkListVectorCalculator"
  input_stream: "ITERABLE:multi_face_landmarks"
  input_stream: "CLONE:size"
  output_stream: "ITEM:face_landmarks"
  output_stream: "CLONE:cloned_size"
  output_stream: "BATCH_END:landmark_timestamp"
}

# Converts landmarks to face part masks.
node {
  calculator: "LandmarksToMaskCalculator"
  input_stream: "SIZE:cloned_size"
  input_stream: "NORM_LANDMARKS:face_landmarks"
  output_stream: "FACEBOX:face_box"
  output_stream: "MASK:mask"
}

# Collects a MapMask object for each hand into a vector. Upon receiving the
# BATCH_END timestamp, outputs the vector of RenderData at the BATCH_END
# timestamp.
node {
  calculator: "EndLoopMapMaskCalculator"
  input_stream: "ITEM:mask"
  input_stream: "BATCH_END:landmark_timestamp"
  output_stream: "ITERABLE:multi_mask"
}

node {
  calculator: "EndLoopFaceBoxCalculator"
  input_stream: "ITEM:face_box"
  input_stream: "BATCH_END:landmark_timestamp"
  output_stream: "ITERABLE:multi_face_box"
}

node {
  calculator: "ImageFrameToMatCalculator"
  input_stream: "IMAGE:input_image"
  output_stream: "MAT:input_mat"
}

node {
  calculator: "DrawLipstickCalculator"
  input_stream: "MAT:input_mat"
  input_stream: "MASK:0:multi_mask"
  output_stream: "MAT:lipstick_image"
  output_stream: "MASK:lipstick_mask"
}

#Whitens teeth of the face on the IMAGE using MASK.
node {
  calculator: "WhitenTeethCalculator"
  input_stream: "MAT:input_mat"
  input_stream: "MASK:0:multi_mask"
  output_stream: "MAT:teeth_image"
  output_stream: "MASK:teeth_mask"
}

#Smoothes face on the IMAGE using MASK.
node {
  calculator: "SmoothFaceCalculator1"
  input_stream: "MAT:input_mat"
  input_stream: "MASK:0:multi_mask"
  input_stream: "FACE:0:multi_face_box"
  output_stream: "MAT:tmp_image_1"
  output_stream: "MASK:face_mask"
  output_stream: "FACE:box_1"
}

node {
   calculator: "RoundRobinDemuxCalculator"
   input_stream: "box_1"
   output_stream: "OUTPUT:0:box1_0"
   output_stream: "OUTPUT:1:box1_1"
   output_stream: "SELECT:select"
 }

 node {
  calculator: "BilateralCalculator"
  input_stream: "IMAGE:box1_0"
  output_stream: "CVMAT:box14_0"
}
 node {
   calculator: "BilateralCalculator"
   input_stream: "IMAGE:box1_1"
   output_stream: "CVMAT:box14_1"
 }

 node {
   calculator: "MuxCalculator"
   input_stream: "INPUT:0:box14_0"
   input_stream: "INPUT:1:box14_1"
   input_stream: "SELECT:select"
  output_stream: "OUTPUT:tmp_image_2"
   input_stream_handler {
     input_stream_handler: "MuxInputStreamHandler"
   }
 }

#Smoothes face on the IMAGE using MASK.
node {
  calculator: "SmoothFaceCalculator2"
  input_stream: "MAT:input_mat"
  input_stream: "IMAGE2:tmp_image_2"
  input_stream: "MASK:face_mask"
  input_stream: "FACEBOX:box_1"
  output_stream: "MAT:face_image"
}

#Merges output images of DrawLipstick, WhitenTeeth and SmoothFace calculators
node {
  calculator: "MergeImagesCalculator"
  input_stream: "MAT:0:lipstick_image"
  input_stream: "MASK:0:lipstick_mask"
  input_stream: "MAT:1:teeth_image"
  input_stream: "MASK:1:teeth_mask"
  input_stream: "MAT:2:face_image"
  input_stream: "MASK:2:face_mask"
  output_stream: "IMAGE:output_image"
}
