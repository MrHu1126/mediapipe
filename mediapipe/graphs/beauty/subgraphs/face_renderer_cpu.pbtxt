# MediaPipe face mesh rendering subgraph.

type: "FaceRendererCpu"

# CPU image. (ImageFrame)
input_stream: "IMAGE:input_image"
# Collection of detected/predicted faces, each represented as a list of
# landmarks. (std::vector<NormalizedLandmarkList>)
input_stream: "LANDMARKS:multi_face_landmarks"

# CPU image with rendered data. (ImageFrame)
output_stream: "IMAGE:output_image"

node {
  calculator: "ImagePropertiesCalculator"
  input_stream: "IMAGE:input_image"
  output_stream: "SIZE:image_size"
}

# Outputs each element of multi_face_landmarks at a fake timestamp for the rest
# of the graph to process. At the end of the loop, outputs the BATCH_END
# timestamp for downstream calculators to inform them that all elements in the
# vector have been processed.
node {
  calculator: "BeginLoopNormalizedLandmarkListVectorCalculator"
  input_stream: "ITERABLE:multi_face_landmarks"
  input_stream: "CLONE:input_image"
  output_stream: "ITEM:face_landmarks"
  output_stream: "CLONE:loop_image"
  output_stream: "BATCH_END:landmark_timestamp"
}

# Converts landmarks to drawing primitives for annotation overlay.
node {
  calculator: "LandmarksToMaskCalculator"
  input_stream: "IMAGE:loop_image"
  input_stream: "NORM_LANDMARKS:face_landmarks"
  output_stream: "FACEBOX:face_box"
  output_stream: "MASK:mask"
}

# Collects a RenderData object for each hand into a vector. Upon receiving the
# BATCH_END timestamp, outputs the vector of RenderData at the BATCH_END
# timestamp.
node {
  calculator: "EndLoopMapMaskCalculator"
  input_stream: "ITEM:mask"
  input_stream: "BATCH_END:landmark_timestamp"
  output_stream: "ITERABLE:multi_mask"
}

node {
  calculator: "EndLoopFaceBoxCalculator"
  input_stream: "ITEM:face_box"
  input_stream: "BATCH_END:landmark_timestamp"
  output_stream: "ITERABLE:multi_face_box"
}


node {
  calculator: "DrawLipstickCalculator"
  input_stream: "IMAGE:input_image"
  input_stream: "MASK:0:multi_mask"
  output_stream: "IMAGE:input_image_1"
}

node {
  calculator: "WhitenTeethCalculator"
  input_stream: "IMAGE:input_image_1"
  input_stream: "MASK:0:multi_mask"
  output_stream: "IMAGE:input_image_2"
}

node {
  calculator: "SmoothFaceCalculator"
  input_stream: "IMAGE:input_image_2"
  input_stream: "MASK:0:multi_mask"
  input_stream: "FACEBOX:multi_face_box"
  output_stream: "IMAGE:output_image"
}



