// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/framework/thread_pool_executor.proto

package mediapipe;

public final class ThreadPoolExecutor {
  private ThreadPoolExecutor() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
    registry.add(mediapipe.ThreadPoolExecutor.ThreadPoolExecutorOptions.ext);
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface ThreadPoolExecutorOptionsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:mediapipe.ThreadPoolExecutorOptions)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Number of threads for running calculators in multithreaded mode.
     * When ThreadPoolExecutorOptions is used in the ExecutorOptions for the
     * default executor with the executor type unspecified, the num_threads
     * field is allowed to be -1 or 0.  If not specified or -1, the scheduler
     * will pick an appropriate number of threads depending on the number of
     * available processors.
     * </pre>
     *
     * <code>optional int32 num_threads = 1;</code>
     */
    boolean hasNumThreads();
    /**
     * <pre>
     * Number of threads for running calculators in multithreaded mode.
     * When ThreadPoolExecutorOptions is used in the ExecutorOptions for the
     * default executor with the executor type unspecified, the num_threads
     * field is allowed to be -1 or 0.  If not specified or -1, the scheduler
     * will pick an appropriate number of threads depending on the number of
     * available processors.
     * </pre>
     *
     * <code>optional int32 num_threads = 1;</code>
     */
    int getNumThreads();

    /**
     * <pre>
     * Make all worker threads have the specified stack size (in bytes).
     * NOTE: The stack_size option may not be implemented on some platforms.
     * </pre>
     *
     * <code>optional int32 stack_size = 2;</code>
     */
    boolean hasStackSize();
    /**
     * <pre>
     * Make all worker threads have the specified stack size (in bytes).
     * NOTE: The stack_size option may not be implemented on some platforms.
     * </pre>
     *
     * <code>optional int32 stack_size = 2;</code>
     */
    int getStackSize();

    /**
     * <pre>
     * The nice priority level of the worker threads.
     * The nice priority level is 0 by default, and lower value means higher
     * priority. The valid thread nice priority level value range varies by OS.
     * Refer to system documentation for more details.
     * </pre>
     *
     * <code>optional int32 nice_priority_level = 3;</code>
     */
    boolean hasNicePriorityLevel();
    /**
     * <pre>
     * The nice priority level of the worker threads.
     * The nice priority level is 0 by default, and lower value means higher
     * priority. The valid thread nice priority level value range varies by OS.
     * Refer to system documentation for more details.
     * </pre>
     *
     * <code>optional int32 nice_priority_level = 3;</code>
     */
    int getNicePriorityLevel();

    /**
     * <pre>
     * The performance hint of the processor(s) that the threads will be bound to.
     * Framework will make the best effort to run the threads on the specific
     * processors based on the performance hint.
     * The attempt may fail for various reasons. Success isn't guaranteed.
     * </pre>
     *
     * <code>optional .mediapipe.ThreadPoolExecutorOptions.ProcessorPerformance require_processor_performance = 4;</code>
     */
    boolean hasRequireProcessorPerformance();
    /**
     * <pre>
     * The performance hint of the processor(s) that the threads will be bound to.
     * Framework will make the best effort to run the threads on the specific
     * processors based on the performance hint.
     * The attempt may fail for various reasons. Success isn't guaranteed.
     * </pre>
     *
     * <code>optional .mediapipe.ThreadPoolExecutorOptions.ProcessorPerformance require_processor_performance = 4;</code>
     */
    mediapipe.ThreadPoolExecutor.ThreadPoolExecutorOptions.ProcessorPerformance getRequireProcessorPerformance();

    /**
     * <pre>
     * Name prefix for worker threads, which can be useful for debugging
     * multithreaded applications.
     * </pre>
     *
     * <code>optional string thread_name_prefix = 5;</code>
     */
    boolean hasThreadNamePrefix();
    /**
     * <pre>
     * Name prefix for worker threads, which can be useful for debugging
     * multithreaded applications.
     * </pre>
     *
     * <code>optional string thread_name_prefix = 5;</code>
     */
    java.lang.String getThreadNamePrefix();
    /**
     * <pre>
     * Name prefix for worker threads, which can be useful for debugging
     * multithreaded applications.
     * </pre>
     *
     * <code>optional string thread_name_prefix = 5;</code>
     */
    com.google.protobuf.ByteString
        getThreadNamePrefixBytes();
  }
  /**
   * Protobuf type {@code mediapipe.ThreadPoolExecutorOptions}
   */
  public  static final class ThreadPoolExecutorOptions extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:mediapipe.ThreadPoolExecutorOptions)
      ThreadPoolExecutorOptionsOrBuilder {
    // Use ThreadPoolExecutorOptions.newBuilder() to construct.
    private ThreadPoolExecutorOptions(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ThreadPoolExecutorOptions() {
      numThreads_ = 0;
      stackSize_ = 0;
      nicePriorityLevel_ = 0;
      requireProcessorPerformance_ = 0;
      threadNamePrefix_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ThreadPoolExecutorOptions(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              numThreads_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              stackSize_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              nicePriorityLevel_ = input.readInt32();
              break;
            }
            case 32: {
              int rawValue = input.readEnum();
              mediapipe.ThreadPoolExecutor.ThreadPoolExecutorOptions.ProcessorPerformance value = mediapipe.ThreadPoolExecutor.ThreadPoolExecutorOptions.ProcessorPerformance.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(4, rawValue);
              } else {
                bitField0_ |= 0x00000008;
                requireProcessorPerformance_ = rawValue;
              }
              break;
            }
            case 42: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000010;
              threadNamePrefix_ = bs;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return mediapipe.ThreadPoolExecutor.internal_static_mediapipe_ThreadPoolExecutorOptions_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return mediapipe.ThreadPoolExecutor.internal_static_mediapipe_ThreadPoolExecutorOptions_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              mediapipe.ThreadPoolExecutor.ThreadPoolExecutorOptions.class, mediapipe.ThreadPoolExecutor.ThreadPoolExecutorOptions.Builder.class);
    }

    /**
     * <pre>
     * Processor performance enum.
     * </pre>
     *
     * Protobuf enum {@code mediapipe.ThreadPoolExecutorOptions.ProcessorPerformance}
     */
    public enum ProcessorPerformance
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>NORMAL = 0;</code>
       */
      NORMAL(0),
      /**
       * <code>LOW = 1;</code>
       */
      LOW(1),
      /**
       * <code>HIGH = 2;</code>
       */
      HIGH(2),
      ;

      /**
       * <code>NORMAL = 0;</code>
       */
      public static final int NORMAL_VALUE = 0;
      /**
       * <code>LOW = 1;</code>
       */
      public static final int LOW_VALUE = 1;
      /**
       * <code>HIGH = 2;</code>
       */
      public static final int HIGH_VALUE = 2;


      public final int getNumber() {
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ProcessorPerformance valueOf(int value) {
        return forNumber(value);
      }

      public static ProcessorPerformance forNumber(int value) {
        switch (value) {
          case 0: return NORMAL;
          case 1: return LOW;
          case 2: return HIGH;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<ProcessorPerformance>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          ProcessorPerformance> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<ProcessorPerformance>() {
              public ProcessorPerformance findValueByNumber(int number) {
                return ProcessorPerformance.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return mediapipe.ThreadPoolExecutor.ThreadPoolExecutorOptions.getDescriptor().getEnumTypes().get(0);
      }

      private static final ProcessorPerformance[] VALUES = values();

      public static ProcessorPerformance valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private ProcessorPerformance(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:mediapipe.ThreadPoolExecutorOptions.ProcessorPerformance)
    }

    private int bitField0_;
    public static final int NUM_THREADS_FIELD_NUMBER = 1;
    private int numThreads_;
    /**
     * <pre>
     * Number of threads for running calculators in multithreaded mode.
     * When ThreadPoolExecutorOptions is used in the ExecutorOptions for the
     * default executor with the executor type unspecified, the num_threads
     * field is allowed to be -1 or 0.  If not specified or -1, the scheduler
     * will pick an appropriate number of threads depending on the number of
     * available processors.
     * </pre>
     *
     * <code>optional int32 num_threads = 1;</code>
     */
    public boolean hasNumThreads() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * Number of threads for running calculators in multithreaded mode.
     * When ThreadPoolExecutorOptions is used in the ExecutorOptions for the
     * default executor with the executor type unspecified, the num_threads
     * field is allowed to be -1 or 0.  If not specified or -1, the scheduler
     * will pick an appropriate number of threads depending on the number of
     * available processors.
     * </pre>
     *
     * <code>optional int32 num_threads = 1;</code>
     */
    public int getNumThreads() {
      return numThreads_;
    }

    public static final int STACK_SIZE_FIELD_NUMBER = 2;
    private int stackSize_;
    /**
     * <pre>
     * Make all worker threads have the specified stack size (in bytes).
     * NOTE: The stack_size option may not be implemented on some platforms.
     * </pre>
     *
     * <code>optional int32 stack_size = 2;</code>
     */
    public boolean hasStackSize() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * Make all worker threads have the specified stack size (in bytes).
     * NOTE: The stack_size option may not be implemented on some platforms.
     * </pre>
     *
     * <code>optional int32 stack_size = 2;</code>
     */
    public int getStackSize() {
      return stackSize_;
    }

    public static final int NICE_PRIORITY_LEVEL_FIELD_NUMBER = 3;
    private int nicePriorityLevel_;
    /**
     * <pre>
     * The nice priority level of the worker threads.
     * The nice priority level is 0 by default, and lower value means higher
     * priority. The valid thread nice priority level value range varies by OS.
     * Refer to system documentation for more details.
     * </pre>
     *
     * <code>optional int32 nice_priority_level = 3;</code>
     */
    public boolean hasNicePriorityLevel() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     * The nice priority level of the worker threads.
     * The nice priority level is 0 by default, and lower value means higher
     * priority. The valid thread nice priority level value range varies by OS.
     * Refer to system documentation for more details.
     * </pre>
     *
     * <code>optional int32 nice_priority_level = 3;</code>
     */
    public int getNicePriorityLevel() {
      return nicePriorityLevel_;
    }

    public static final int REQUIRE_PROCESSOR_PERFORMANCE_FIELD_NUMBER = 4;
    private int requireProcessorPerformance_;
    /**
     * <pre>
     * The performance hint of the processor(s) that the threads will be bound to.
     * Framework will make the best effort to run the threads on the specific
     * processors based on the performance hint.
     * The attempt may fail for various reasons. Success isn't guaranteed.
     * </pre>
     *
     * <code>optional .mediapipe.ThreadPoolExecutorOptions.ProcessorPerformance require_processor_performance = 4;</code>
     */
    public boolean hasRequireProcessorPerformance() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     * The performance hint of the processor(s) that the threads will be bound to.
     * Framework will make the best effort to run the threads on the specific
     * processors based on the performance hint.
     * The attempt may fail for various reasons. Success isn't guaranteed.
     * </pre>
     *
     * <code>optional .mediapipe.ThreadPoolExecutorOptions.ProcessorPerformance require_processor_performance = 4;</code>
     */
    public mediapipe.ThreadPoolExecutor.ThreadPoolExecutorOptions.ProcessorPerformance getRequireProcessorPerformance() {
      mediapipe.ThreadPoolExecutor.ThreadPoolExecutorOptions.ProcessorPerformance result = mediapipe.ThreadPoolExecutor.ThreadPoolExecutorOptions.ProcessorPerformance.valueOf(requireProcessorPerformance_);
      return result == null ? mediapipe.ThreadPoolExecutor.ThreadPoolExecutorOptions.ProcessorPerformance.NORMAL : result;
    }

    public static final int THREAD_NAME_PREFIX_FIELD_NUMBER = 5;
    private volatile java.lang.Object threadNamePrefix_;
    /**
     * <pre>
     * Name prefix for worker threads, which can be useful for debugging
     * multithreaded applications.
     * </pre>
     *
     * <code>optional string thread_name_prefix = 5;</code>
     */
    public boolean hasThreadNamePrefix() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <pre>
     * Name prefix for worker threads, which can be useful for debugging
     * multithreaded applications.
     * </pre>
     *
     * <code>optional string thread_name_prefix = 5;</code>
     */
    public java.lang.String getThreadNamePrefix() {
      java.lang.Object ref = threadNamePrefix_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          threadNamePrefix_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * Name prefix for worker threads, which can be useful for debugging
     * multithreaded applications.
     * </pre>
     *
     * <code>optional string thread_name_prefix = 5;</code>
     */
    public com.google.protobuf.ByteString
        getThreadNamePrefixBytes() {
      java.lang.Object ref = threadNamePrefix_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        threadNamePrefix_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, numThreads_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, stackSize_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, nicePriorityLevel_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeEnum(4, requireProcessorPerformance_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 5, threadNamePrefix_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, numThreads_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, stackSize_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, nicePriorityLevel_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(4, requireProcessorPerformance_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, threadNamePrefix_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof mediapipe.ThreadPoolExecutor.ThreadPoolExecutorOptions)) {
        return super.equals(obj);
      }
      mediapipe.ThreadPoolExecutor.ThreadPoolExecutorOptions other = (mediapipe.ThreadPoolExecutor.ThreadPoolExecutorOptions) obj;

      boolean result = true;
      result = result && (hasNumThreads() == other.hasNumThreads());
      if (hasNumThreads()) {
        result = result && (getNumThreads()
            == other.getNumThreads());
      }
      result = result && (hasStackSize() == other.hasStackSize());
      if (hasStackSize()) {
        result = result && (getStackSize()
            == other.getStackSize());
      }
      result = result && (hasNicePriorityLevel() == other.hasNicePriorityLevel());
      if (hasNicePriorityLevel()) {
        result = result && (getNicePriorityLevel()
            == other.getNicePriorityLevel());
      }
      result = result && (hasRequireProcessorPerformance() == other.hasRequireProcessorPerformance());
      if (hasRequireProcessorPerformance()) {
        result = result && requireProcessorPerformance_ == other.requireProcessorPerformance_;
      }
      result = result && (hasThreadNamePrefix() == other.hasThreadNamePrefix());
      if (hasThreadNamePrefix()) {
        result = result && getThreadNamePrefix()
            .equals(other.getThreadNamePrefix());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasNumThreads()) {
        hash = (37 * hash) + NUM_THREADS_FIELD_NUMBER;
        hash = (53 * hash) + getNumThreads();
      }
      if (hasStackSize()) {
        hash = (37 * hash) + STACK_SIZE_FIELD_NUMBER;
        hash = (53 * hash) + getStackSize();
      }
      if (hasNicePriorityLevel()) {
        hash = (37 * hash) + NICE_PRIORITY_LEVEL_FIELD_NUMBER;
        hash = (53 * hash) + getNicePriorityLevel();
      }
      if (hasRequireProcessorPerformance()) {
        hash = (37 * hash) + REQUIRE_PROCESSOR_PERFORMANCE_FIELD_NUMBER;
        hash = (53 * hash) + requireProcessorPerformance_;
      }
      if (hasThreadNamePrefix()) {
        hash = (37 * hash) + THREAD_NAME_PREFIX_FIELD_NUMBER;
        hash = (53 * hash) + getThreadNamePrefix().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static mediapipe.ThreadPoolExecutor.ThreadPoolExecutorOptions parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static mediapipe.ThreadPoolExecutor.ThreadPoolExecutorOptions parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static mediapipe.ThreadPoolExecutor.ThreadPoolExecutorOptions parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static mediapipe.ThreadPoolExecutor.ThreadPoolExecutorOptions parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static mediapipe.ThreadPoolExecutor.ThreadPoolExecutorOptions parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static mediapipe.ThreadPoolExecutor.ThreadPoolExecutorOptions parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static mediapipe.ThreadPoolExecutor.ThreadPoolExecutorOptions parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static mediapipe.ThreadPoolExecutor.ThreadPoolExecutorOptions parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static mediapipe.ThreadPoolExecutor.ThreadPoolExecutorOptions parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static mediapipe.ThreadPoolExecutor.ThreadPoolExecutorOptions parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(mediapipe.ThreadPoolExecutor.ThreadPoolExecutorOptions prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code mediapipe.ThreadPoolExecutorOptions}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:mediapipe.ThreadPoolExecutorOptions)
        mediapipe.ThreadPoolExecutor.ThreadPoolExecutorOptionsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return mediapipe.ThreadPoolExecutor.internal_static_mediapipe_ThreadPoolExecutorOptions_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return mediapipe.ThreadPoolExecutor.internal_static_mediapipe_ThreadPoolExecutorOptions_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                mediapipe.ThreadPoolExecutor.ThreadPoolExecutorOptions.class, mediapipe.ThreadPoolExecutor.ThreadPoolExecutorOptions.Builder.class);
      }

      // Construct using mediapipe.ThreadPoolExecutor.ThreadPoolExecutorOptions.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        numThreads_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        stackSize_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        nicePriorityLevel_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        requireProcessorPerformance_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        threadNamePrefix_ = "";
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return mediapipe.ThreadPoolExecutor.internal_static_mediapipe_ThreadPoolExecutorOptions_descriptor;
      }

      public mediapipe.ThreadPoolExecutor.ThreadPoolExecutorOptions getDefaultInstanceForType() {
        return mediapipe.ThreadPoolExecutor.ThreadPoolExecutorOptions.getDefaultInstance();
      }

      public mediapipe.ThreadPoolExecutor.ThreadPoolExecutorOptions build() {
        mediapipe.ThreadPoolExecutor.ThreadPoolExecutorOptions result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public mediapipe.ThreadPoolExecutor.ThreadPoolExecutorOptions buildPartial() {
        mediapipe.ThreadPoolExecutor.ThreadPoolExecutorOptions result = new mediapipe.ThreadPoolExecutor.ThreadPoolExecutorOptions(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.numThreads_ = numThreads_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.stackSize_ = stackSize_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.nicePriorityLevel_ = nicePriorityLevel_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.requireProcessorPerformance_ = requireProcessorPerformance_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.threadNamePrefix_ = threadNamePrefix_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof mediapipe.ThreadPoolExecutor.ThreadPoolExecutorOptions) {
          return mergeFrom((mediapipe.ThreadPoolExecutor.ThreadPoolExecutorOptions)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(mediapipe.ThreadPoolExecutor.ThreadPoolExecutorOptions other) {
        if (other == mediapipe.ThreadPoolExecutor.ThreadPoolExecutorOptions.getDefaultInstance()) return this;
        if (other.hasNumThreads()) {
          setNumThreads(other.getNumThreads());
        }
        if (other.hasStackSize()) {
          setStackSize(other.getStackSize());
        }
        if (other.hasNicePriorityLevel()) {
          setNicePriorityLevel(other.getNicePriorityLevel());
        }
        if (other.hasRequireProcessorPerformance()) {
          setRequireProcessorPerformance(other.getRequireProcessorPerformance());
        }
        if (other.hasThreadNamePrefix()) {
          bitField0_ |= 0x00000010;
          threadNamePrefix_ = other.threadNamePrefix_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        mediapipe.ThreadPoolExecutor.ThreadPoolExecutorOptions parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (mediapipe.ThreadPoolExecutor.ThreadPoolExecutorOptions) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int numThreads_ ;
      /**
       * <pre>
       * Number of threads for running calculators in multithreaded mode.
       * When ThreadPoolExecutorOptions is used in the ExecutorOptions for the
       * default executor with the executor type unspecified, the num_threads
       * field is allowed to be -1 or 0.  If not specified or -1, the scheduler
       * will pick an appropriate number of threads depending on the number of
       * available processors.
       * </pre>
       *
       * <code>optional int32 num_threads = 1;</code>
       */
      public boolean hasNumThreads() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       * Number of threads for running calculators in multithreaded mode.
       * When ThreadPoolExecutorOptions is used in the ExecutorOptions for the
       * default executor with the executor type unspecified, the num_threads
       * field is allowed to be -1 or 0.  If not specified or -1, the scheduler
       * will pick an appropriate number of threads depending on the number of
       * available processors.
       * </pre>
       *
       * <code>optional int32 num_threads = 1;</code>
       */
      public int getNumThreads() {
        return numThreads_;
      }
      /**
       * <pre>
       * Number of threads for running calculators in multithreaded mode.
       * When ThreadPoolExecutorOptions is used in the ExecutorOptions for the
       * default executor with the executor type unspecified, the num_threads
       * field is allowed to be -1 or 0.  If not specified or -1, the scheduler
       * will pick an appropriate number of threads depending on the number of
       * available processors.
       * </pre>
       *
       * <code>optional int32 num_threads = 1;</code>
       */
      public Builder setNumThreads(int value) {
        bitField0_ |= 0x00000001;
        numThreads_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Number of threads for running calculators in multithreaded mode.
       * When ThreadPoolExecutorOptions is used in the ExecutorOptions for the
       * default executor with the executor type unspecified, the num_threads
       * field is allowed to be -1 or 0.  If not specified or -1, the scheduler
       * will pick an appropriate number of threads depending on the number of
       * available processors.
       * </pre>
       *
       * <code>optional int32 num_threads = 1;</code>
       */
      public Builder clearNumThreads() {
        bitField0_ = (bitField0_ & ~0x00000001);
        numThreads_ = 0;
        onChanged();
        return this;
      }

      private int stackSize_ ;
      /**
       * <pre>
       * Make all worker threads have the specified stack size (in bytes).
       * NOTE: The stack_size option may not be implemented on some platforms.
       * </pre>
       *
       * <code>optional int32 stack_size = 2;</code>
       */
      public boolean hasStackSize() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       * Make all worker threads have the specified stack size (in bytes).
       * NOTE: The stack_size option may not be implemented on some platforms.
       * </pre>
       *
       * <code>optional int32 stack_size = 2;</code>
       */
      public int getStackSize() {
        return stackSize_;
      }
      /**
       * <pre>
       * Make all worker threads have the specified stack size (in bytes).
       * NOTE: The stack_size option may not be implemented on some platforms.
       * </pre>
       *
       * <code>optional int32 stack_size = 2;</code>
       */
      public Builder setStackSize(int value) {
        bitField0_ |= 0x00000002;
        stackSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Make all worker threads have the specified stack size (in bytes).
       * NOTE: The stack_size option may not be implemented on some platforms.
       * </pre>
       *
       * <code>optional int32 stack_size = 2;</code>
       */
      public Builder clearStackSize() {
        bitField0_ = (bitField0_ & ~0x00000002);
        stackSize_ = 0;
        onChanged();
        return this;
      }

      private int nicePriorityLevel_ ;
      /**
       * <pre>
       * The nice priority level of the worker threads.
       * The nice priority level is 0 by default, and lower value means higher
       * priority. The valid thread nice priority level value range varies by OS.
       * Refer to system documentation for more details.
       * </pre>
       *
       * <code>optional int32 nice_priority_level = 3;</code>
       */
      public boolean hasNicePriorityLevel() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       * The nice priority level of the worker threads.
       * The nice priority level is 0 by default, and lower value means higher
       * priority. The valid thread nice priority level value range varies by OS.
       * Refer to system documentation for more details.
       * </pre>
       *
       * <code>optional int32 nice_priority_level = 3;</code>
       */
      public int getNicePriorityLevel() {
        return nicePriorityLevel_;
      }
      /**
       * <pre>
       * The nice priority level of the worker threads.
       * The nice priority level is 0 by default, and lower value means higher
       * priority. The valid thread nice priority level value range varies by OS.
       * Refer to system documentation for more details.
       * </pre>
       *
       * <code>optional int32 nice_priority_level = 3;</code>
       */
      public Builder setNicePriorityLevel(int value) {
        bitField0_ |= 0x00000004;
        nicePriorityLevel_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The nice priority level of the worker threads.
       * The nice priority level is 0 by default, and lower value means higher
       * priority. The valid thread nice priority level value range varies by OS.
       * Refer to system documentation for more details.
       * </pre>
       *
       * <code>optional int32 nice_priority_level = 3;</code>
       */
      public Builder clearNicePriorityLevel() {
        bitField0_ = (bitField0_ & ~0x00000004);
        nicePriorityLevel_ = 0;
        onChanged();
        return this;
      }

      private int requireProcessorPerformance_ = 0;
      /**
       * <pre>
       * The performance hint of the processor(s) that the threads will be bound to.
       * Framework will make the best effort to run the threads on the specific
       * processors based on the performance hint.
       * The attempt may fail for various reasons. Success isn't guaranteed.
       * </pre>
       *
       * <code>optional .mediapipe.ThreadPoolExecutorOptions.ProcessorPerformance require_processor_performance = 4;</code>
       */
      public boolean hasRequireProcessorPerformance() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <pre>
       * The performance hint of the processor(s) that the threads will be bound to.
       * Framework will make the best effort to run the threads on the specific
       * processors based on the performance hint.
       * The attempt may fail for various reasons. Success isn't guaranteed.
       * </pre>
       *
       * <code>optional .mediapipe.ThreadPoolExecutorOptions.ProcessorPerformance require_processor_performance = 4;</code>
       */
      public mediapipe.ThreadPoolExecutor.ThreadPoolExecutorOptions.ProcessorPerformance getRequireProcessorPerformance() {
        mediapipe.ThreadPoolExecutor.ThreadPoolExecutorOptions.ProcessorPerformance result = mediapipe.ThreadPoolExecutor.ThreadPoolExecutorOptions.ProcessorPerformance.valueOf(requireProcessorPerformance_);
        return result == null ? mediapipe.ThreadPoolExecutor.ThreadPoolExecutorOptions.ProcessorPerformance.NORMAL : result;
      }
      /**
       * <pre>
       * The performance hint of the processor(s) that the threads will be bound to.
       * Framework will make the best effort to run the threads on the specific
       * processors based on the performance hint.
       * The attempt may fail for various reasons. Success isn't guaranteed.
       * </pre>
       *
       * <code>optional .mediapipe.ThreadPoolExecutorOptions.ProcessorPerformance require_processor_performance = 4;</code>
       */
      public Builder setRequireProcessorPerformance(mediapipe.ThreadPoolExecutor.ThreadPoolExecutorOptions.ProcessorPerformance value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000008;
        requireProcessorPerformance_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The performance hint of the processor(s) that the threads will be bound to.
       * Framework will make the best effort to run the threads on the specific
       * processors based on the performance hint.
       * The attempt may fail for various reasons. Success isn't guaranteed.
       * </pre>
       *
       * <code>optional .mediapipe.ThreadPoolExecutorOptions.ProcessorPerformance require_processor_performance = 4;</code>
       */
      public Builder clearRequireProcessorPerformance() {
        bitField0_ = (bitField0_ & ~0x00000008);
        requireProcessorPerformance_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object threadNamePrefix_ = "";
      /**
       * <pre>
       * Name prefix for worker threads, which can be useful for debugging
       * multithreaded applications.
       * </pre>
       *
       * <code>optional string thread_name_prefix = 5;</code>
       */
      public boolean hasThreadNamePrefix() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <pre>
       * Name prefix for worker threads, which can be useful for debugging
       * multithreaded applications.
       * </pre>
       *
       * <code>optional string thread_name_prefix = 5;</code>
       */
      public java.lang.String getThreadNamePrefix() {
        java.lang.Object ref = threadNamePrefix_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            threadNamePrefix_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Name prefix for worker threads, which can be useful for debugging
       * multithreaded applications.
       * </pre>
       *
       * <code>optional string thread_name_prefix = 5;</code>
       */
      public com.google.protobuf.ByteString
          getThreadNamePrefixBytes() {
        java.lang.Object ref = threadNamePrefix_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          threadNamePrefix_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Name prefix for worker threads, which can be useful for debugging
       * multithreaded applications.
       * </pre>
       *
       * <code>optional string thread_name_prefix = 5;</code>
       */
      public Builder setThreadNamePrefix(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        threadNamePrefix_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Name prefix for worker threads, which can be useful for debugging
       * multithreaded applications.
       * </pre>
       *
       * <code>optional string thread_name_prefix = 5;</code>
       */
      public Builder clearThreadNamePrefix() {
        bitField0_ = (bitField0_ & ~0x00000010);
        threadNamePrefix_ = getDefaultInstance().getThreadNamePrefix();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Name prefix for worker threads, which can be useful for debugging
       * multithreaded applications.
       * </pre>
       *
       * <code>optional string thread_name_prefix = 5;</code>
       */
      public Builder setThreadNamePrefixBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        threadNamePrefix_ = value;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:mediapipe.ThreadPoolExecutorOptions)
    }

    // @@protoc_insertion_point(class_scope:mediapipe.ThreadPoolExecutorOptions)
    private static final mediapipe.ThreadPoolExecutor.ThreadPoolExecutorOptions DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new mediapipe.ThreadPoolExecutor.ThreadPoolExecutorOptions();
    }

    public static mediapipe.ThreadPoolExecutor.ThreadPoolExecutorOptions getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<ThreadPoolExecutorOptions>
        PARSER = new com.google.protobuf.AbstractParser<ThreadPoolExecutorOptions>() {
      public ThreadPoolExecutorOptions parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new ThreadPoolExecutorOptions(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ThreadPoolExecutorOptions> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ThreadPoolExecutorOptions> getParserForType() {
      return PARSER;
    }

    public mediapipe.ThreadPoolExecutor.ThreadPoolExecutorOptions getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

    public static final int EXT_FIELD_NUMBER = 157116819;
    /**
     * <code>extend .mediapipe.MediaPipeOptions { ... }</code>
     */
    public static final
      com.google.protobuf.GeneratedMessage.GeneratedExtension<
        mediapipe.MediapipeOptions.MediaPipeOptions,
        mediapipe.ThreadPoolExecutor.ThreadPoolExecutorOptions> ext = com.google.protobuf.GeneratedMessage
            .newMessageScopedGeneratedExtension(
          mediapipe.ThreadPoolExecutor.ThreadPoolExecutorOptions.getDefaultInstance(),
          0,
          mediapipe.ThreadPoolExecutor.ThreadPoolExecutorOptions.class,
          mediapipe.ThreadPoolExecutor.ThreadPoolExecutorOptions.getDefaultInstance());
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_mediapipe_ThreadPoolExecutorOptions_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_mediapipe_ThreadPoolExecutorOptions_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n.mediapipe/framework/thread_pool_execut" +
      "or.proto\022\tmediapipe\032+mediapipe/framework" +
      "/mediapipe_options.proto\"\351\002\n\031ThreadPoolE" +
      "xecutorOptions\022\023\n\013num_threads\030\001 \001(\005\022\022\n\ns" +
      "tack_size\030\002 \001(\005\022\033\n\023nice_priority_level\030\003" +
      " \001(\005\022`\n\035require_processor_performance\030\004 " +
      "\001(\01629.mediapipe.ThreadPoolExecutorOption" +
      "s.ProcessorPerformance\022\032\n\022thread_name_pr" +
      "efix\030\005 \001(\t\"5\n\024ProcessorPerformance\022\n\n\006NO" +
      "RMAL\020\000\022\007\n\003LOW\020\001\022\010\n\004HIGH\020\0022Q\n\003ext\022\033.media",
      "pipe.MediaPipeOptions\030\223\323\365J \001(\0132$.mediapi" +
      "pe.ThreadPoolExecutorOptions"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          mediapipe.MediapipeOptions.getDescriptor(),
        }, assigner);
    internal_static_mediapipe_ThreadPoolExecutorOptions_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_mediapipe_ThreadPoolExecutorOptions_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_mediapipe_ThreadPoolExecutorOptions_descriptor,
        new java.lang.String[] { "NumThreads", "StackSize", "NicePriorityLevel", "RequireProcessorPerformance", "ThreadNamePrefix", });
    mediapipe.MediapipeOptions.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
