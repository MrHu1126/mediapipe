// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/util/audio_decoder.proto

package mediapipe;

public final class AudioDecoder {
  private AudioDecoder() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
    registry.add(mediapipe.AudioDecoder.AudioDecoderOptions.ext);
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface AudioStreamOptionsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:mediapipe.AudioStreamOptions)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The stream to decode.  Stream indexes start from 0 (audio and video
     * are handled separately).
     * </pre>
     *
     * <code>optional int64 stream_index = 1 [default = 0];</code>
     */
    boolean hasStreamIndex();
    /**
     * <pre>
     * The stream to decode.  Stream indexes start from 0 (audio and video
     * are handled separately).
     * </pre>
     *
     * <code>optional int64 stream_index = 1 [default = 0];</code>
     */
    long getStreamIndex();

    /**
     * <pre>
     * Process the file despite this stream not being present.
     * </pre>
     *
     * <code>optional bool allow_missing = 2 [default = false];</code>
     */
    boolean hasAllowMissing();
    /**
     * <pre>
     * Process the file despite this stream not being present.
     * </pre>
     *
     * <code>optional bool allow_missing = 2 [default = false];</code>
     */
    boolean getAllowMissing();

    /**
     * <pre>
     * If true, failures to decode a frame of data will be ignored.
     * </pre>
     *
     * <code>optional bool ignore_decode_failures = 3 [default = false];</code>
     */
    boolean hasIgnoreDecodeFailures();
    /**
     * <pre>
     * If true, failures to decode a frame of data will be ignored.
     * </pre>
     *
     * <code>optional bool ignore_decode_failures = 3 [default = false];</code>
     */
    boolean getIgnoreDecodeFailures();

    /**
     * <pre>
     * Output packets with regressing timestamps. By default those packets are
     * dropped.
     * </pre>
     *
     * <code>optional bool output_regressing_timestamps = 4 [default = false];</code>
     */
    boolean hasOutputRegressingTimestamps();
    /**
     * <pre>
     * Output packets with regressing timestamps. By default those packets are
     * dropped.
     * </pre>
     *
     * <code>optional bool output_regressing_timestamps = 4 [default = false];</code>
     */
    boolean getOutputRegressingTimestamps();

    /**
     * <pre>
     * MPEG PTS timestamps roll over back to 0 after 26.5h. If this flag is set
     * we detect any rollover and continue incrementing timestamps past this
     * point. Set this flag if you want non-regressing timestamps for MPEG
     * content where the PTS may roll over.
     * </pre>
     *
     * <code>optional bool correct_pts_for_rollover = 5;</code>
     */
    boolean hasCorrectPtsForRollover();
    /**
     * <pre>
     * MPEG PTS timestamps roll over back to 0 after 26.5h. If this flag is set
     * we detect any rollover and continue incrementing timestamps past this
     * point. Set this flag if you want non-regressing timestamps for MPEG
     * content where the PTS may roll over.
     * </pre>
     *
     * <code>optional bool correct_pts_for_rollover = 5;</code>
     */
    boolean getCorrectPtsForRollover();
  }
  /**
   * Protobuf type {@code mediapipe.AudioStreamOptions}
   */
  public  static final class AudioStreamOptions extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:mediapipe.AudioStreamOptions)
      AudioStreamOptionsOrBuilder {
    // Use AudioStreamOptions.newBuilder() to construct.
    private AudioStreamOptions(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private AudioStreamOptions() {
      streamIndex_ = 0L;
      allowMissing_ = false;
      ignoreDecodeFailures_ = false;
      outputRegressingTimestamps_ = false;
      correctPtsForRollover_ = false;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private AudioStreamOptions(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              streamIndex_ = input.readInt64();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              allowMissing_ = input.readBool();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              ignoreDecodeFailures_ = input.readBool();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              outputRegressingTimestamps_ = input.readBool();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              correctPtsForRollover_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return mediapipe.AudioDecoder.internal_static_mediapipe_AudioStreamOptions_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return mediapipe.AudioDecoder.internal_static_mediapipe_AudioStreamOptions_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              mediapipe.AudioDecoder.AudioStreamOptions.class, mediapipe.AudioDecoder.AudioStreamOptions.Builder.class);
    }

    private int bitField0_;
    public static final int STREAM_INDEX_FIELD_NUMBER = 1;
    private long streamIndex_;
    /**
     * <pre>
     * The stream to decode.  Stream indexes start from 0 (audio and video
     * are handled separately).
     * </pre>
     *
     * <code>optional int64 stream_index = 1 [default = 0];</code>
     */
    public boolean hasStreamIndex() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * The stream to decode.  Stream indexes start from 0 (audio and video
     * are handled separately).
     * </pre>
     *
     * <code>optional int64 stream_index = 1 [default = 0];</code>
     */
    public long getStreamIndex() {
      return streamIndex_;
    }

    public static final int ALLOW_MISSING_FIELD_NUMBER = 2;
    private boolean allowMissing_;
    /**
     * <pre>
     * Process the file despite this stream not being present.
     * </pre>
     *
     * <code>optional bool allow_missing = 2 [default = false];</code>
     */
    public boolean hasAllowMissing() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * Process the file despite this stream not being present.
     * </pre>
     *
     * <code>optional bool allow_missing = 2 [default = false];</code>
     */
    public boolean getAllowMissing() {
      return allowMissing_;
    }

    public static final int IGNORE_DECODE_FAILURES_FIELD_NUMBER = 3;
    private boolean ignoreDecodeFailures_;
    /**
     * <pre>
     * If true, failures to decode a frame of data will be ignored.
     * </pre>
     *
     * <code>optional bool ignore_decode_failures = 3 [default = false];</code>
     */
    public boolean hasIgnoreDecodeFailures() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     * If true, failures to decode a frame of data will be ignored.
     * </pre>
     *
     * <code>optional bool ignore_decode_failures = 3 [default = false];</code>
     */
    public boolean getIgnoreDecodeFailures() {
      return ignoreDecodeFailures_;
    }

    public static final int OUTPUT_REGRESSING_TIMESTAMPS_FIELD_NUMBER = 4;
    private boolean outputRegressingTimestamps_;
    /**
     * <pre>
     * Output packets with regressing timestamps. By default those packets are
     * dropped.
     * </pre>
     *
     * <code>optional bool output_regressing_timestamps = 4 [default = false];</code>
     */
    public boolean hasOutputRegressingTimestamps() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     * Output packets with regressing timestamps. By default those packets are
     * dropped.
     * </pre>
     *
     * <code>optional bool output_regressing_timestamps = 4 [default = false];</code>
     */
    public boolean getOutputRegressingTimestamps() {
      return outputRegressingTimestamps_;
    }

    public static final int CORRECT_PTS_FOR_ROLLOVER_FIELD_NUMBER = 5;
    private boolean correctPtsForRollover_;
    /**
     * <pre>
     * MPEG PTS timestamps roll over back to 0 after 26.5h. If this flag is set
     * we detect any rollover and continue incrementing timestamps past this
     * point. Set this flag if you want non-regressing timestamps for MPEG
     * content where the PTS may roll over.
     * </pre>
     *
     * <code>optional bool correct_pts_for_rollover = 5;</code>
     */
    public boolean hasCorrectPtsForRollover() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <pre>
     * MPEG PTS timestamps roll over back to 0 after 26.5h. If this flag is set
     * we detect any rollover and continue incrementing timestamps past this
     * point. Set this flag if you want non-regressing timestamps for MPEG
     * content where the PTS may roll over.
     * </pre>
     *
     * <code>optional bool correct_pts_for_rollover = 5;</code>
     */
    public boolean getCorrectPtsForRollover() {
      return correctPtsForRollover_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt64(1, streamIndex_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBool(2, allowMissing_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBool(3, ignoreDecodeFailures_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBool(4, outputRegressingTimestamps_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBool(5, correctPtsForRollover_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, streamIndex_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, allowMissing_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, ignoreDecodeFailures_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, outputRegressingTimestamps_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, correctPtsForRollover_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof mediapipe.AudioDecoder.AudioStreamOptions)) {
        return super.equals(obj);
      }
      mediapipe.AudioDecoder.AudioStreamOptions other = (mediapipe.AudioDecoder.AudioStreamOptions) obj;

      boolean result = true;
      result = result && (hasStreamIndex() == other.hasStreamIndex());
      if (hasStreamIndex()) {
        result = result && (getStreamIndex()
            == other.getStreamIndex());
      }
      result = result && (hasAllowMissing() == other.hasAllowMissing());
      if (hasAllowMissing()) {
        result = result && (getAllowMissing()
            == other.getAllowMissing());
      }
      result = result && (hasIgnoreDecodeFailures() == other.hasIgnoreDecodeFailures());
      if (hasIgnoreDecodeFailures()) {
        result = result && (getIgnoreDecodeFailures()
            == other.getIgnoreDecodeFailures());
      }
      result = result && (hasOutputRegressingTimestamps() == other.hasOutputRegressingTimestamps());
      if (hasOutputRegressingTimestamps()) {
        result = result && (getOutputRegressingTimestamps()
            == other.getOutputRegressingTimestamps());
      }
      result = result && (hasCorrectPtsForRollover() == other.hasCorrectPtsForRollover());
      if (hasCorrectPtsForRollover()) {
        result = result && (getCorrectPtsForRollover()
            == other.getCorrectPtsForRollover());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasStreamIndex()) {
        hash = (37 * hash) + STREAM_INDEX_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getStreamIndex());
      }
      if (hasAllowMissing()) {
        hash = (37 * hash) + ALLOW_MISSING_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getAllowMissing());
      }
      if (hasIgnoreDecodeFailures()) {
        hash = (37 * hash) + IGNORE_DECODE_FAILURES_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getIgnoreDecodeFailures());
      }
      if (hasOutputRegressingTimestamps()) {
        hash = (37 * hash) + OUTPUT_REGRESSING_TIMESTAMPS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getOutputRegressingTimestamps());
      }
      if (hasCorrectPtsForRollover()) {
        hash = (37 * hash) + CORRECT_PTS_FOR_ROLLOVER_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getCorrectPtsForRollover());
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static mediapipe.AudioDecoder.AudioStreamOptions parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static mediapipe.AudioDecoder.AudioStreamOptions parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static mediapipe.AudioDecoder.AudioStreamOptions parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static mediapipe.AudioDecoder.AudioStreamOptions parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static mediapipe.AudioDecoder.AudioStreamOptions parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static mediapipe.AudioDecoder.AudioStreamOptions parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static mediapipe.AudioDecoder.AudioStreamOptions parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static mediapipe.AudioDecoder.AudioStreamOptions parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static mediapipe.AudioDecoder.AudioStreamOptions parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static mediapipe.AudioDecoder.AudioStreamOptions parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(mediapipe.AudioDecoder.AudioStreamOptions prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code mediapipe.AudioStreamOptions}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:mediapipe.AudioStreamOptions)
        mediapipe.AudioDecoder.AudioStreamOptionsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return mediapipe.AudioDecoder.internal_static_mediapipe_AudioStreamOptions_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return mediapipe.AudioDecoder.internal_static_mediapipe_AudioStreamOptions_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                mediapipe.AudioDecoder.AudioStreamOptions.class, mediapipe.AudioDecoder.AudioStreamOptions.Builder.class);
      }

      // Construct using mediapipe.AudioDecoder.AudioStreamOptions.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        streamIndex_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        allowMissing_ = false;
        bitField0_ = (bitField0_ & ~0x00000002);
        ignoreDecodeFailures_ = false;
        bitField0_ = (bitField0_ & ~0x00000004);
        outputRegressingTimestamps_ = false;
        bitField0_ = (bitField0_ & ~0x00000008);
        correctPtsForRollover_ = false;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return mediapipe.AudioDecoder.internal_static_mediapipe_AudioStreamOptions_descriptor;
      }

      public mediapipe.AudioDecoder.AudioStreamOptions getDefaultInstanceForType() {
        return mediapipe.AudioDecoder.AudioStreamOptions.getDefaultInstance();
      }

      public mediapipe.AudioDecoder.AudioStreamOptions build() {
        mediapipe.AudioDecoder.AudioStreamOptions result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public mediapipe.AudioDecoder.AudioStreamOptions buildPartial() {
        mediapipe.AudioDecoder.AudioStreamOptions result = new mediapipe.AudioDecoder.AudioStreamOptions(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.streamIndex_ = streamIndex_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.allowMissing_ = allowMissing_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.ignoreDecodeFailures_ = ignoreDecodeFailures_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.outputRegressingTimestamps_ = outputRegressingTimestamps_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.correctPtsForRollover_ = correctPtsForRollover_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof mediapipe.AudioDecoder.AudioStreamOptions) {
          return mergeFrom((mediapipe.AudioDecoder.AudioStreamOptions)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(mediapipe.AudioDecoder.AudioStreamOptions other) {
        if (other == mediapipe.AudioDecoder.AudioStreamOptions.getDefaultInstance()) return this;
        if (other.hasStreamIndex()) {
          setStreamIndex(other.getStreamIndex());
        }
        if (other.hasAllowMissing()) {
          setAllowMissing(other.getAllowMissing());
        }
        if (other.hasIgnoreDecodeFailures()) {
          setIgnoreDecodeFailures(other.getIgnoreDecodeFailures());
        }
        if (other.hasOutputRegressingTimestamps()) {
          setOutputRegressingTimestamps(other.getOutputRegressingTimestamps());
        }
        if (other.hasCorrectPtsForRollover()) {
          setCorrectPtsForRollover(other.getCorrectPtsForRollover());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        mediapipe.AudioDecoder.AudioStreamOptions parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (mediapipe.AudioDecoder.AudioStreamOptions) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private long streamIndex_ ;
      /**
       * <pre>
       * The stream to decode.  Stream indexes start from 0 (audio and video
       * are handled separately).
       * </pre>
       *
       * <code>optional int64 stream_index = 1 [default = 0];</code>
       */
      public boolean hasStreamIndex() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       * The stream to decode.  Stream indexes start from 0 (audio and video
       * are handled separately).
       * </pre>
       *
       * <code>optional int64 stream_index = 1 [default = 0];</code>
       */
      public long getStreamIndex() {
        return streamIndex_;
      }
      /**
       * <pre>
       * The stream to decode.  Stream indexes start from 0 (audio and video
       * are handled separately).
       * </pre>
       *
       * <code>optional int64 stream_index = 1 [default = 0];</code>
       */
      public Builder setStreamIndex(long value) {
        bitField0_ |= 0x00000001;
        streamIndex_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The stream to decode.  Stream indexes start from 0 (audio and video
       * are handled separately).
       * </pre>
       *
       * <code>optional int64 stream_index = 1 [default = 0];</code>
       */
      public Builder clearStreamIndex() {
        bitField0_ = (bitField0_ & ~0x00000001);
        streamIndex_ = 0L;
        onChanged();
        return this;
      }

      private boolean allowMissing_ ;
      /**
       * <pre>
       * Process the file despite this stream not being present.
       * </pre>
       *
       * <code>optional bool allow_missing = 2 [default = false];</code>
       */
      public boolean hasAllowMissing() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       * Process the file despite this stream not being present.
       * </pre>
       *
       * <code>optional bool allow_missing = 2 [default = false];</code>
       */
      public boolean getAllowMissing() {
        return allowMissing_;
      }
      /**
       * <pre>
       * Process the file despite this stream not being present.
       * </pre>
       *
       * <code>optional bool allow_missing = 2 [default = false];</code>
       */
      public Builder setAllowMissing(boolean value) {
        bitField0_ |= 0x00000002;
        allowMissing_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Process the file despite this stream not being present.
       * </pre>
       *
       * <code>optional bool allow_missing = 2 [default = false];</code>
       */
      public Builder clearAllowMissing() {
        bitField0_ = (bitField0_ & ~0x00000002);
        allowMissing_ = false;
        onChanged();
        return this;
      }

      private boolean ignoreDecodeFailures_ ;
      /**
       * <pre>
       * If true, failures to decode a frame of data will be ignored.
       * </pre>
       *
       * <code>optional bool ignore_decode_failures = 3 [default = false];</code>
       */
      public boolean hasIgnoreDecodeFailures() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       * If true, failures to decode a frame of data will be ignored.
       * </pre>
       *
       * <code>optional bool ignore_decode_failures = 3 [default = false];</code>
       */
      public boolean getIgnoreDecodeFailures() {
        return ignoreDecodeFailures_;
      }
      /**
       * <pre>
       * If true, failures to decode a frame of data will be ignored.
       * </pre>
       *
       * <code>optional bool ignore_decode_failures = 3 [default = false];</code>
       */
      public Builder setIgnoreDecodeFailures(boolean value) {
        bitField0_ |= 0x00000004;
        ignoreDecodeFailures_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If true, failures to decode a frame of data will be ignored.
       * </pre>
       *
       * <code>optional bool ignore_decode_failures = 3 [default = false];</code>
       */
      public Builder clearIgnoreDecodeFailures() {
        bitField0_ = (bitField0_ & ~0x00000004);
        ignoreDecodeFailures_ = false;
        onChanged();
        return this;
      }

      private boolean outputRegressingTimestamps_ ;
      /**
       * <pre>
       * Output packets with regressing timestamps. By default those packets are
       * dropped.
       * </pre>
       *
       * <code>optional bool output_regressing_timestamps = 4 [default = false];</code>
       */
      public boolean hasOutputRegressingTimestamps() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <pre>
       * Output packets with regressing timestamps. By default those packets are
       * dropped.
       * </pre>
       *
       * <code>optional bool output_regressing_timestamps = 4 [default = false];</code>
       */
      public boolean getOutputRegressingTimestamps() {
        return outputRegressingTimestamps_;
      }
      /**
       * <pre>
       * Output packets with regressing timestamps. By default those packets are
       * dropped.
       * </pre>
       *
       * <code>optional bool output_regressing_timestamps = 4 [default = false];</code>
       */
      public Builder setOutputRegressingTimestamps(boolean value) {
        bitField0_ |= 0x00000008;
        outputRegressingTimestamps_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Output packets with regressing timestamps. By default those packets are
       * dropped.
       * </pre>
       *
       * <code>optional bool output_regressing_timestamps = 4 [default = false];</code>
       */
      public Builder clearOutputRegressingTimestamps() {
        bitField0_ = (bitField0_ & ~0x00000008);
        outputRegressingTimestamps_ = false;
        onChanged();
        return this;
      }

      private boolean correctPtsForRollover_ ;
      /**
       * <pre>
       * MPEG PTS timestamps roll over back to 0 after 26.5h. If this flag is set
       * we detect any rollover and continue incrementing timestamps past this
       * point. Set this flag if you want non-regressing timestamps for MPEG
       * content where the PTS may roll over.
       * </pre>
       *
       * <code>optional bool correct_pts_for_rollover = 5;</code>
       */
      public boolean hasCorrectPtsForRollover() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <pre>
       * MPEG PTS timestamps roll over back to 0 after 26.5h. If this flag is set
       * we detect any rollover and continue incrementing timestamps past this
       * point. Set this flag if you want non-regressing timestamps for MPEG
       * content where the PTS may roll over.
       * </pre>
       *
       * <code>optional bool correct_pts_for_rollover = 5;</code>
       */
      public boolean getCorrectPtsForRollover() {
        return correctPtsForRollover_;
      }
      /**
       * <pre>
       * MPEG PTS timestamps roll over back to 0 after 26.5h. If this flag is set
       * we detect any rollover and continue incrementing timestamps past this
       * point. Set this flag if you want non-regressing timestamps for MPEG
       * content where the PTS may roll over.
       * </pre>
       *
       * <code>optional bool correct_pts_for_rollover = 5;</code>
       */
      public Builder setCorrectPtsForRollover(boolean value) {
        bitField0_ |= 0x00000010;
        correctPtsForRollover_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * MPEG PTS timestamps roll over back to 0 after 26.5h. If this flag is set
       * we detect any rollover and continue incrementing timestamps past this
       * point. Set this flag if you want non-regressing timestamps for MPEG
       * content where the PTS may roll over.
       * </pre>
       *
       * <code>optional bool correct_pts_for_rollover = 5;</code>
       */
      public Builder clearCorrectPtsForRollover() {
        bitField0_ = (bitField0_ & ~0x00000010);
        correctPtsForRollover_ = false;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:mediapipe.AudioStreamOptions)
    }

    // @@protoc_insertion_point(class_scope:mediapipe.AudioStreamOptions)
    private static final mediapipe.AudioDecoder.AudioStreamOptions DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new mediapipe.AudioDecoder.AudioStreamOptions();
    }

    public static mediapipe.AudioDecoder.AudioStreamOptions getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<AudioStreamOptions>
        PARSER = new com.google.protobuf.AbstractParser<AudioStreamOptions>() {
      public AudioStreamOptions parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new AudioStreamOptions(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<AudioStreamOptions> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<AudioStreamOptions> getParserForType() {
      return PARSER;
    }

    public mediapipe.AudioDecoder.AudioStreamOptions getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface AudioDecoderOptionsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:mediapipe.AudioDecoderOptions)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .mediapipe.AudioStreamOptions audio_stream = 1;</code>
     */
    java.util.List<mediapipe.AudioDecoder.AudioStreamOptions> 
        getAudioStreamList();
    /**
     * <code>repeated .mediapipe.AudioStreamOptions audio_stream = 1;</code>
     */
    mediapipe.AudioDecoder.AudioStreamOptions getAudioStream(int index);
    /**
     * <code>repeated .mediapipe.AudioStreamOptions audio_stream = 1;</code>
     */
    int getAudioStreamCount();
    /**
     * <code>repeated .mediapipe.AudioStreamOptions audio_stream = 1;</code>
     */
    java.util.List<? extends mediapipe.AudioDecoder.AudioStreamOptionsOrBuilder> 
        getAudioStreamOrBuilderList();
    /**
     * <code>repeated .mediapipe.AudioStreamOptions audio_stream = 1;</code>
     */
    mediapipe.AudioDecoder.AudioStreamOptionsOrBuilder getAudioStreamOrBuilder(
        int index);

    /**
     * <pre>
     * The start time in seconds to decode.
     * </pre>
     *
     * <code>optional double start_time = 2;</code>
     */
    boolean hasStartTime();
    /**
     * <pre>
     * The start time in seconds to decode.
     * </pre>
     *
     * <code>optional double start_time = 2;</code>
     */
    double getStartTime();

    /**
     * <pre>
     * The end time in seconds to decode (inclusive).
     * </pre>
     *
     * <code>optional double end_time = 3;</code>
     */
    boolean hasEndTime();
    /**
     * <pre>
     * The end time in seconds to decode (inclusive).
     * </pre>
     *
     * <code>optional double end_time = 3;</code>
     */
    double getEndTime();
  }
  /**
   * Protobuf type {@code mediapipe.AudioDecoderOptions}
   */
  public  static final class AudioDecoderOptions extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:mediapipe.AudioDecoderOptions)
      AudioDecoderOptionsOrBuilder {
    // Use AudioDecoderOptions.newBuilder() to construct.
    private AudioDecoderOptions(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private AudioDecoderOptions() {
      audioStream_ = java.util.Collections.emptyList();
      startTime_ = 0D;
      endTime_ = 0D;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private AudioDecoderOptions(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                audioStream_ = new java.util.ArrayList<mediapipe.AudioDecoder.AudioStreamOptions>();
                mutable_bitField0_ |= 0x00000001;
              }
              audioStream_.add(
                  input.readMessage(mediapipe.AudioDecoder.AudioStreamOptions.PARSER, extensionRegistry));
              break;
            }
            case 17: {
              bitField0_ |= 0x00000001;
              startTime_ = input.readDouble();
              break;
            }
            case 25: {
              bitField0_ |= 0x00000002;
              endTime_ = input.readDouble();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          audioStream_ = java.util.Collections.unmodifiableList(audioStream_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return mediapipe.AudioDecoder.internal_static_mediapipe_AudioDecoderOptions_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return mediapipe.AudioDecoder.internal_static_mediapipe_AudioDecoderOptions_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              mediapipe.AudioDecoder.AudioDecoderOptions.class, mediapipe.AudioDecoder.AudioDecoderOptions.Builder.class);
    }

    private int bitField0_;
    public static final int AUDIO_STREAM_FIELD_NUMBER = 1;
    private java.util.List<mediapipe.AudioDecoder.AudioStreamOptions> audioStream_;
    /**
     * <code>repeated .mediapipe.AudioStreamOptions audio_stream = 1;</code>
     */
    public java.util.List<mediapipe.AudioDecoder.AudioStreamOptions> getAudioStreamList() {
      return audioStream_;
    }
    /**
     * <code>repeated .mediapipe.AudioStreamOptions audio_stream = 1;</code>
     */
    public java.util.List<? extends mediapipe.AudioDecoder.AudioStreamOptionsOrBuilder> 
        getAudioStreamOrBuilderList() {
      return audioStream_;
    }
    /**
     * <code>repeated .mediapipe.AudioStreamOptions audio_stream = 1;</code>
     */
    public int getAudioStreamCount() {
      return audioStream_.size();
    }
    /**
     * <code>repeated .mediapipe.AudioStreamOptions audio_stream = 1;</code>
     */
    public mediapipe.AudioDecoder.AudioStreamOptions getAudioStream(int index) {
      return audioStream_.get(index);
    }
    /**
     * <code>repeated .mediapipe.AudioStreamOptions audio_stream = 1;</code>
     */
    public mediapipe.AudioDecoder.AudioStreamOptionsOrBuilder getAudioStreamOrBuilder(
        int index) {
      return audioStream_.get(index);
    }

    public static final int START_TIME_FIELD_NUMBER = 2;
    private double startTime_;
    /**
     * <pre>
     * The start time in seconds to decode.
     * </pre>
     *
     * <code>optional double start_time = 2;</code>
     */
    public boolean hasStartTime() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * The start time in seconds to decode.
     * </pre>
     *
     * <code>optional double start_time = 2;</code>
     */
    public double getStartTime() {
      return startTime_;
    }

    public static final int END_TIME_FIELD_NUMBER = 3;
    private double endTime_;
    /**
     * <pre>
     * The end time in seconds to decode (inclusive).
     * </pre>
     *
     * <code>optional double end_time = 3;</code>
     */
    public boolean hasEndTime() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * The end time in seconds to decode (inclusive).
     * </pre>
     *
     * <code>optional double end_time = 3;</code>
     */
    public double getEndTime() {
      return endTime_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < audioStream_.size(); i++) {
        output.writeMessage(1, audioStream_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeDouble(2, startTime_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeDouble(3, endTime_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < audioStream_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, audioStream_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, startTime_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(3, endTime_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof mediapipe.AudioDecoder.AudioDecoderOptions)) {
        return super.equals(obj);
      }
      mediapipe.AudioDecoder.AudioDecoderOptions other = (mediapipe.AudioDecoder.AudioDecoderOptions) obj;

      boolean result = true;
      result = result && getAudioStreamList()
          .equals(other.getAudioStreamList());
      result = result && (hasStartTime() == other.hasStartTime());
      if (hasStartTime()) {
        result = result && (
            java.lang.Double.doubleToLongBits(getStartTime())
            == java.lang.Double.doubleToLongBits(
                other.getStartTime()));
      }
      result = result && (hasEndTime() == other.hasEndTime());
      if (hasEndTime()) {
        result = result && (
            java.lang.Double.doubleToLongBits(getEndTime())
            == java.lang.Double.doubleToLongBits(
                other.getEndTime()));
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (getAudioStreamCount() > 0) {
        hash = (37 * hash) + AUDIO_STREAM_FIELD_NUMBER;
        hash = (53 * hash) + getAudioStreamList().hashCode();
      }
      if (hasStartTime()) {
        hash = (37 * hash) + START_TIME_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getStartTime()));
      }
      if (hasEndTime()) {
        hash = (37 * hash) + END_TIME_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getEndTime()));
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static mediapipe.AudioDecoder.AudioDecoderOptions parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static mediapipe.AudioDecoder.AudioDecoderOptions parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static mediapipe.AudioDecoder.AudioDecoderOptions parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static mediapipe.AudioDecoder.AudioDecoderOptions parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static mediapipe.AudioDecoder.AudioDecoderOptions parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static mediapipe.AudioDecoder.AudioDecoderOptions parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static mediapipe.AudioDecoder.AudioDecoderOptions parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static mediapipe.AudioDecoder.AudioDecoderOptions parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static mediapipe.AudioDecoder.AudioDecoderOptions parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static mediapipe.AudioDecoder.AudioDecoderOptions parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(mediapipe.AudioDecoder.AudioDecoderOptions prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code mediapipe.AudioDecoderOptions}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:mediapipe.AudioDecoderOptions)
        mediapipe.AudioDecoder.AudioDecoderOptionsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return mediapipe.AudioDecoder.internal_static_mediapipe_AudioDecoderOptions_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return mediapipe.AudioDecoder.internal_static_mediapipe_AudioDecoderOptions_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                mediapipe.AudioDecoder.AudioDecoderOptions.class, mediapipe.AudioDecoder.AudioDecoderOptions.Builder.class);
      }

      // Construct using mediapipe.AudioDecoder.AudioDecoderOptions.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getAudioStreamFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        if (audioStreamBuilder_ == null) {
          audioStream_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          audioStreamBuilder_.clear();
        }
        startTime_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000002);
        endTime_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return mediapipe.AudioDecoder.internal_static_mediapipe_AudioDecoderOptions_descriptor;
      }

      public mediapipe.AudioDecoder.AudioDecoderOptions getDefaultInstanceForType() {
        return mediapipe.AudioDecoder.AudioDecoderOptions.getDefaultInstance();
      }

      public mediapipe.AudioDecoder.AudioDecoderOptions build() {
        mediapipe.AudioDecoder.AudioDecoderOptions result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public mediapipe.AudioDecoder.AudioDecoderOptions buildPartial() {
        mediapipe.AudioDecoder.AudioDecoderOptions result = new mediapipe.AudioDecoder.AudioDecoderOptions(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (audioStreamBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            audioStream_ = java.util.Collections.unmodifiableList(audioStream_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.audioStream_ = audioStream_;
        } else {
          result.audioStream_ = audioStreamBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000001;
        }
        result.startTime_ = startTime_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.endTime_ = endTime_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof mediapipe.AudioDecoder.AudioDecoderOptions) {
          return mergeFrom((mediapipe.AudioDecoder.AudioDecoderOptions)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(mediapipe.AudioDecoder.AudioDecoderOptions other) {
        if (other == mediapipe.AudioDecoder.AudioDecoderOptions.getDefaultInstance()) return this;
        if (audioStreamBuilder_ == null) {
          if (!other.audioStream_.isEmpty()) {
            if (audioStream_.isEmpty()) {
              audioStream_ = other.audioStream_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureAudioStreamIsMutable();
              audioStream_.addAll(other.audioStream_);
            }
            onChanged();
          }
        } else {
          if (!other.audioStream_.isEmpty()) {
            if (audioStreamBuilder_.isEmpty()) {
              audioStreamBuilder_.dispose();
              audioStreamBuilder_ = null;
              audioStream_ = other.audioStream_;
              bitField0_ = (bitField0_ & ~0x00000001);
              audioStreamBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getAudioStreamFieldBuilder() : null;
            } else {
              audioStreamBuilder_.addAllMessages(other.audioStream_);
            }
          }
        }
        if (other.hasStartTime()) {
          setStartTime(other.getStartTime());
        }
        if (other.hasEndTime()) {
          setEndTime(other.getEndTime());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        mediapipe.AudioDecoder.AudioDecoderOptions parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (mediapipe.AudioDecoder.AudioDecoderOptions) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<mediapipe.AudioDecoder.AudioStreamOptions> audioStream_ =
        java.util.Collections.emptyList();
      private void ensureAudioStreamIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          audioStream_ = new java.util.ArrayList<mediapipe.AudioDecoder.AudioStreamOptions>(audioStream_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          mediapipe.AudioDecoder.AudioStreamOptions, mediapipe.AudioDecoder.AudioStreamOptions.Builder, mediapipe.AudioDecoder.AudioStreamOptionsOrBuilder> audioStreamBuilder_;

      /**
       * <code>repeated .mediapipe.AudioStreamOptions audio_stream = 1;</code>
       */
      public java.util.List<mediapipe.AudioDecoder.AudioStreamOptions> getAudioStreamList() {
        if (audioStreamBuilder_ == null) {
          return java.util.Collections.unmodifiableList(audioStream_);
        } else {
          return audioStreamBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .mediapipe.AudioStreamOptions audio_stream = 1;</code>
       */
      public int getAudioStreamCount() {
        if (audioStreamBuilder_ == null) {
          return audioStream_.size();
        } else {
          return audioStreamBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .mediapipe.AudioStreamOptions audio_stream = 1;</code>
       */
      public mediapipe.AudioDecoder.AudioStreamOptions getAudioStream(int index) {
        if (audioStreamBuilder_ == null) {
          return audioStream_.get(index);
        } else {
          return audioStreamBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .mediapipe.AudioStreamOptions audio_stream = 1;</code>
       */
      public Builder setAudioStream(
          int index, mediapipe.AudioDecoder.AudioStreamOptions value) {
        if (audioStreamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAudioStreamIsMutable();
          audioStream_.set(index, value);
          onChanged();
        } else {
          audioStreamBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .mediapipe.AudioStreamOptions audio_stream = 1;</code>
       */
      public Builder setAudioStream(
          int index, mediapipe.AudioDecoder.AudioStreamOptions.Builder builderForValue) {
        if (audioStreamBuilder_ == null) {
          ensureAudioStreamIsMutable();
          audioStream_.set(index, builderForValue.build());
          onChanged();
        } else {
          audioStreamBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .mediapipe.AudioStreamOptions audio_stream = 1;</code>
       */
      public Builder addAudioStream(mediapipe.AudioDecoder.AudioStreamOptions value) {
        if (audioStreamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAudioStreamIsMutable();
          audioStream_.add(value);
          onChanged();
        } else {
          audioStreamBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .mediapipe.AudioStreamOptions audio_stream = 1;</code>
       */
      public Builder addAudioStream(
          int index, mediapipe.AudioDecoder.AudioStreamOptions value) {
        if (audioStreamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAudioStreamIsMutable();
          audioStream_.add(index, value);
          onChanged();
        } else {
          audioStreamBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .mediapipe.AudioStreamOptions audio_stream = 1;</code>
       */
      public Builder addAudioStream(
          mediapipe.AudioDecoder.AudioStreamOptions.Builder builderForValue) {
        if (audioStreamBuilder_ == null) {
          ensureAudioStreamIsMutable();
          audioStream_.add(builderForValue.build());
          onChanged();
        } else {
          audioStreamBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .mediapipe.AudioStreamOptions audio_stream = 1;</code>
       */
      public Builder addAudioStream(
          int index, mediapipe.AudioDecoder.AudioStreamOptions.Builder builderForValue) {
        if (audioStreamBuilder_ == null) {
          ensureAudioStreamIsMutable();
          audioStream_.add(index, builderForValue.build());
          onChanged();
        } else {
          audioStreamBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .mediapipe.AudioStreamOptions audio_stream = 1;</code>
       */
      public Builder addAllAudioStream(
          java.lang.Iterable<? extends mediapipe.AudioDecoder.AudioStreamOptions> values) {
        if (audioStreamBuilder_ == null) {
          ensureAudioStreamIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, audioStream_);
          onChanged();
        } else {
          audioStreamBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .mediapipe.AudioStreamOptions audio_stream = 1;</code>
       */
      public Builder clearAudioStream() {
        if (audioStreamBuilder_ == null) {
          audioStream_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          audioStreamBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .mediapipe.AudioStreamOptions audio_stream = 1;</code>
       */
      public Builder removeAudioStream(int index) {
        if (audioStreamBuilder_ == null) {
          ensureAudioStreamIsMutable();
          audioStream_.remove(index);
          onChanged();
        } else {
          audioStreamBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .mediapipe.AudioStreamOptions audio_stream = 1;</code>
       */
      public mediapipe.AudioDecoder.AudioStreamOptions.Builder getAudioStreamBuilder(
          int index) {
        return getAudioStreamFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .mediapipe.AudioStreamOptions audio_stream = 1;</code>
       */
      public mediapipe.AudioDecoder.AudioStreamOptionsOrBuilder getAudioStreamOrBuilder(
          int index) {
        if (audioStreamBuilder_ == null) {
          return audioStream_.get(index);  } else {
          return audioStreamBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .mediapipe.AudioStreamOptions audio_stream = 1;</code>
       */
      public java.util.List<? extends mediapipe.AudioDecoder.AudioStreamOptionsOrBuilder> 
           getAudioStreamOrBuilderList() {
        if (audioStreamBuilder_ != null) {
          return audioStreamBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(audioStream_);
        }
      }
      /**
       * <code>repeated .mediapipe.AudioStreamOptions audio_stream = 1;</code>
       */
      public mediapipe.AudioDecoder.AudioStreamOptions.Builder addAudioStreamBuilder() {
        return getAudioStreamFieldBuilder().addBuilder(
            mediapipe.AudioDecoder.AudioStreamOptions.getDefaultInstance());
      }
      /**
       * <code>repeated .mediapipe.AudioStreamOptions audio_stream = 1;</code>
       */
      public mediapipe.AudioDecoder.AudioStreamOptions.Builder addAudioStreamBuilder(
          int index) {
        return getAudioStreamFieldBuilder().addBuilder(
            index, mediapipe.AudioDecoder.AudioStreamOptions.getDefaultInstance());
      }
      /**
       * <code>repeated .mediapipe.AudioStreamOptions audio_stream = 1;</code>
       */
      public java.util.List<mediapipe.AudioDecoder.AudioStreamOptions.Builder> 
           getAudioStreamBuilderList() {
        return getAudioStreamFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          mediapipe.AudioDecoder.AudioStreamOptions, mediapipe.AudioDecoder.AudioStreamOptions.Builder, mediapipe.AudioDecoder.AudioStreamOptionsOrBuilder> 
          getAudioStreamFieldBuilder() {
        if (audioStreamBuilder_ == null) {
          audioStreamBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              mediapipe.AudioDecoder.AudioStreamOptions, mediapipe.AudioDecoder.AudioStreamOptions.Builder, mediapipe.AudioDecoder.AudioStreamOptionsOrBuilder>(
                  audioStream_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          audioStream_ = null;
        }
        return audioStreamBuilder_;
      }

      private double startTime_ ;
      /**
       * <pre>
       * The start time in seconds to decode.
       * </pre>
       *
       * <code>optional double start_time = 2;</code>
       */
      public boolean hasStartTime() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       * The start time in seconds to decode.
       * </pre>
       *
       * <code>optional double start_time = 2;</code>
       */
      public double getStartTime() {
        return startTime_;
      }
      /**
       * <pre>
       * The start time in seconds to decode.
       * </pre>
       *
       * <code>optional double start_time = 2;</code>
       */
      public Builder setStartTime(double value) {
        bitField0_ |= 0x00000002;
        startTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The start time in seconds to decode.
       * </pre>
       *
       * <code>optional double start_time = 2;</code>
       */
      public Builder clearStartTime() {
        bitField0_ = (bitField0_ & ~0x00000002);
        startTime_ = 0D;
        onChanged();
        return this;
      }

      private double endTime_ ;
      /**
       * <pre>
       * The end time in seconds to decode (inclusive).
       * </pre>
       *
       * <code>optional double end_time = 3;</code>
       */
      public boolean hasEndTime() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       * The end time in seconds to decode (inclusive).
       * </pre>
       *
       * <code>optional double end_time = 3;</code>
       */
      public double getEndTime() {
        return endTime_;
      }
      /**
       * <pre>
       * The end time in seconds to decode (inclusive).
       * </pre>
       *
       * <code>optional double end_time = 3;</code>
       */
      public Builder setEndTime(double value) {
        bitField0_ |= 0x00000004;
        endTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The end time in seconds to decode (inclusive).
       * </pre>
       *
       * <code>optional double end_time = 3;</code>
       */
      public Builder clearEndTime() {
        bitField0_ = (bitField0_ & ~0x00000004);
        endTime_ = 0D;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:mediapipe.AudioDecoderOptions)
    }

    // @@protoc_insertion_point(class_scope:mediapipe.AudioDecoderOptions)
    private static final mediapipe.AudioDecoder.AudioDecoderOptions DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new mediapipe.AudioDecoder.AudioDecoderOptions();
    }

    public static mediapipe.AudioDecoder.AudioDecoderOptions getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<AudioDecoderOptions>
        PARSER = new com.google.protobuf.AbstractParser<AudioDecoderOptions>() {
      public AudioDecoderOptions parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new AudioDecoderOptions(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<AudioDecoderOptions> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<AudioDecoderOptions> getParserForType() {
      return PARSER;
    }

    public mediapipe.AudioDecoder.AudioDecoderOptions getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

    public static final int EXT_FIELD_NUMBER = 263370674;
    /**
     * <code>extend .mediapipe.CalculatorOptions { ... }</code>
     */
    public static final
      com.google.protobuf.GeneratedMessage.GeneratedExtension<
        com.google.mediapipe.proto.CalculatorOptionsProto.CalculatorOptions,
        mediapipe.AudioDecoder.AudioDecoderOptions> ext = com.google.protobuf.GeneratedMessage
            .newMessageScopedGeneratedExtension(
          mediapipe.AudioDecoder.AudioDecoderOptions.getDefaultInstance(),
          0,
          mediapipe.AudioDecoder.AudioDecoderOptions.class,
          mediapipe.AudioDecoder.AudioDecoderOptions.getDefaultInstance());
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_mediapipe_AudioStreamOptions_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_mediapipe_AudioStreamOptions_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_mediapipe_AudioDecoderOptions_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_mediapipe_AudioDecoderOptions_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\"mediapipe/util/audio_decoder.proto\022\tme" +
      "diapipe\032$mediapipe/framework/calculator." +
      "proto\"\301\001\n\022AudioStreamOptions\022\027\n\014stream_i" +
      "ndex\030\001 \001(\003:\0010\022\034\n\rallow_missing\030\002 \001(\010:\005fa" +
      "lse\022%\n\026ignore_decode_failures\030\003 \001(\010:\005fal" +
      "se\022+\n\034output_regressing_timestamps\030\004 \001(\010" +
      ":\005false\022 \n\030correct_pts_for_rollover\030\005 \001(" +
      "\010\"\276\001\n\023AudioDecoderOptions\0223\n\014audio_strea" +
      "m\030\001 \003(\0132\035.mediapipe.AudioStreamOptions\022\022" +
      "\n\nstart_time\030\002 \001(\001\022\020\n\010end_time\030\003 \001(\0012L\n\003",
      "ext\022\034.mediapipe.CalculatorOptions\030\262\357\312} \001" +
      "(\0132\036.mediapipe.AudioDecoderOptions"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.google.mediapipe.proto.CalculatorProto.getDescriptor(),
        }, assigner);
    internal_static_mediapipe_AudioStreamOptions_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_mediapipe_AudioStreamOptions_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_mediapipe_AudioStreamOptions_descriptor,
        new java.lang.String[] { "StreamIndex", "AllowMissing", "IgnoreDecodeFailures", "OutputRegressingTimestamps", "CorrectPtsForRollover", });
    internal_static_mediapipe_AudioDecoderOptions_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_mediapipe_AudioDecoderOptions_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_mediapipe_AudioDecoderOptions_descriptor,
        new java.lang.String[] { "AudioStream", "StartTime", "EndTime", });
    com.google.mediapipe.proto.CalculatorProto.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
